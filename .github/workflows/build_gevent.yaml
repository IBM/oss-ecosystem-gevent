

name: gevent testing

on: 
  workflow_call:
    inputs:
      release:
        required: true
        type: string

env:
  # Weirdly, this has to be a top-level key, not ``defaults.env``
  PYTHONHASHSEED: 8675309
  PYTHONUNBUFFERED: 1
  PYTHONDONTWRITEBYTECODE: 1
  PIP_UPGRADE_STRATEGY: eager
  # Don't get warnings about Python 2 support being deprecated. We
  # know. The env var works for pip 20.
  PIP_NO_PYTHON_VERSION_WARNING: 1
  PIP_NO_WARN_SCRIPT_LOCATION: 1
  GEVENTSETUP_EV_VERIFY: 1
  # Disable some warnings produced by libev especially and also some Cython generated code.
  # These are shared between GCC and clang so it must be a minimal set.
  # TODO: Figure out how to set env vars per platform without resorting to inline scripting.
  # Note that changing the value of these variables invalidates configure caches
  CFLAGS: -Ofast -pipe -Wno-strict-aliasing -Wno-comment
  CPPFLAGS: -DEV_VERIFY=1
  # Uploading built wheels for releases.
  # TWINE_PASSWORD is encrypted and stored directly in the
  # travis repo settings.
  TWINE_USERNAME: __token__
  ###
  # caching
  ###
  CCACHE_DIR: ~/.ccache
  CC: "ccache gcc"
  CCACHE_NOCPP2: true
  CCACHE_SLOPPINESS: file_macro,time_macros,include_file_ctime,include_file_mtime
  CCACHE_NOHASHDIR: true

  #


jobs:
  manylinux_ppc64le:
    runs-on: ubuntu-latest
    # We use a regular Python matrix entry to share as much code as possible.
    strategy:
      matrix:
        python-version: [3.9]

    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: Checkout gevent repo
        uses: actions/checkout@v3
        with:
          repository: gevent/gevent
          path: gevent
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache ~/.ccache
        uses: actions/cache@v2
        with:
          path: ~/.ccache/
          key: ${{ runner.os }}-ccache_manylinux-${{ matrix.python-version }}
      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"

      - name: pip cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip_manylinux_ppc64le-${{ matrix.python-version }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Update pip
        run: pip install -U pip
      - name: Enable emulation
        run: |
          docker run --rm --privileged hypriot/qemu-register
        # This one was seen in pyca/bcrypt. What's the difference?
        # (Other than this one not working.)
        #run: |
        #  docker run --rm --privileged multiarch/qemu-user-static:register --reset
      - name: Build and test gevent
        # Skip the bulk of the tests, running them emulated on arm takes
        # forever. Likewise, don't build or even configure c-ares; in the emulated platform
        # it takes at least 15 minutes and often much longer.
        env:
          DOCKER_IMAGE: quay.io/pypa/manylinux2014_ppc64le
          GEVENTTEST_SKIP_ALL: 1
          GEVENTSETUP_DISABLE_ARES: 1
        run: |
          cd gevent
          git checkout tags/${{ inputs.release }}
          chmod +x scripts/releases/make-manylinux
          ./scripts/releases/make-manylinux
          tar -zcvf manylinux_ppc64le_wheels_${{ inputs.release }}.tar.gz wheelhouse/
      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ inputs.release }}
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true
          artifacts: gevent/manylinux_ppc64le_wheels_${{ inputs.release }}.tar.gz
          name: ${{ inputs.release }}
          replacesArtifacts: true
          draft: false
          prerelease: false 


